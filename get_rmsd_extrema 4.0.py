"""
Use PyMol to compute the minimum and maximum RMSD values and output them. Also, take images of the best and worst alignments and capture images of them with the
B-factor putty activated, and save them to your working directory.
"""

## import dependencies
from pymol import cmd, stored
import sys

alignment = {}


def pdb_merge(pdb_id1, pdb_id2, file_out_name):
    '''
    This subroutine takes in two pdb_ids that you would like to merge, and acesses their files in order to write a copy of the pdb_id file corresponding
    to pdb_id1, with the Bfactor column of the alpha carbon modified to include the rmsd values generated by rmsd_b to column 11 for image creation by 
    b-factor putty visualization
    
    Arguments:
    pdb_id1 -- a pdb_id for the first protein strucutre you would like to compare
    pdb_id2 --a pdb_id for the second protein strucutre you would like to compare
    file_out -- a string representing the name of the merged pdb id output file you wish to write to (THIS MUST BE A .pdb)
    '''
    cmd.super(pdb_id1 , pdb_id2, object='alignment1')
    cmd.save('alignment1.pdb')
    cmd.disable('alignment1')

    selection1 = pdb_id1 + ' & alignment1'
    selection2 = pdb_id2 + ' & alignment1'
    print 'rmsd_b selection1 = {}'.format(selection1)
    print 'rmsd_b selection2 = {}'.format(selection2)
    rmsd_b( selection1, selection2 )

    iterate_cmd = pdb_id1 + ' and name CA'
    cmd.iterate(iterate_cmd, "alignment[resi] = b")

    # print the following for debug...
    cmd.save(pdb_id1 + '_mod.pdb', pdb_id1)
    cmd.save('rmsd_b_selection1.pdb', selection1)

    print 'Output modified {} as {}'.format(pdb_id1, file_out_name)
    sys.stdout.flush()
    with open(pdb_id1 + '.pdb') as f_in:
        with open(file_out_name,'w') as f_out:
            for line in f_in:
                line_temp = line.strip().split()
                if line_temp[0] != 'ATOM':
                    f_out.write(line)
                    continue
                if line_temp[2] != 'CA':
                    f_out.write(line)
                elif line_temp[2] == 'CA':
                    if line_temp[5] in alignment.keys():
                        line_out = line[0:61] + str(round( alignment[line_temp[5]], 2) ) + line[66:]
                        f_out.write(line_out)
                    else:
                        print 'error: key {} not in alignment dictionary'.format(line_temp[5])


####################
#       MAIN       #
####################

pdb_id_list = []
rmsd_dict = {}

## Read in the first 25 pdb_ids due to computing costs (AKA crashing pymol)
print 'Read pdb_ids.'
sys.stdout.flush()
with open('pdb_ids.txt') as f:
    counter = 0
    for pdb_id in f:
        if counter < 25:
            pdb_id_list.append(pdb_id.strip('\n'))
            counter += 1
        else:
            break

## Fetch the pdb_ids in pdb_id_list
print 'Fetch pdb_id files.'
sys.stdout.flush()
cmd.reinitialize()
for pdb_id in pdb_id_list:
    cmd.fetch(pdb_id, async=0)
    cmd.disable(pdb_id)

## Perform a pairwise RMSD on every single unique permutation of pdb_ids, then store the results in a dictionary
print 'Compute pairwise RMSD values and store in dictionary.'
sys.stdout.flush()
for i in range(len(pdb_id_list) - 1):
    for j in range( (i+1) , len(pdb_id_list) ):
        rmsd_key = ( str(pdb_id_list[i]) , str(pdb_id_list[j]) )
        rmsd = cmd.super(pdb_id_list[i], pdb_id_list[j])
        assert( len(rmsd) > 0 )
        rmsd_dict[rmsd_key] = rmsd[0]

## Find the largest RMSD in your dictionary, and obtain/report the pdb_ids that resulted in the rmsd extrema
print 'Find max and min RMSD pairs'
sys.stdout.flush()
max_rmsd = max(rmsd_dict.values())
assert(max_rmsd > 0)
max_rmsd_key = [k for k, v in rmsd_dict.items() if v == max_rmsd]
assert(len(max_rmsd_key) == 1)

min_rmsd = min(rmsd_dict.values())
assert(min_rmsd > 0)
min_rmsd_key = [k for k, v in rmsd_dict.items() if v == min_rmsd]    
assert(len(min_rmsd_key) == 1)

max_id1 = max_rmsd_key[0][0]
max_id2 = max_rmsd_key[0][1]
print('The maximum rmsd arose from a comparison of ' + max_id1 + ' and ' + max_id2 + ' with a rmsd value of: ' +  str( round(max_rmsd,2) ) )

min_id1 = min_rmsd_key[0][0]
min_id2 = min_rmsd_key[0][1]
print('The maximum rmsd arose from a comparison of ' + min_id1 + ' and ' + min_id2 + ' with a rmsd value of: ' +  str( round(min_rmsd,2) ) )

## set your best and worst protein structures up to take an image, and capture this to your working directory
print 'Build best.pdb from {} and {}'.format(max_id1, max_id2)
sys.stdout.flush()
pdb_merge(max_id1 , max_id2 , 'best.pdb')

print 'Build worst.pdb from {} and {}'.format(min_id1, min_id2)
sys.stdout.flush()
pdb_merge(min_id1 , min_id2 , 'worst.pdb')

cmd.load('best.pdb')
cmd.cartoon('putty', 'best')
cmd.draw()
cmd.save('best.png')

cmd.load('worst.pdb')
cmd.cartoon('putty', 'worst')
cmd.draw()
cmd.save('worst.png')
